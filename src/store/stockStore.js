import { defineStore } from 'pinia';
import { ref, computed } from 'vue';
import axios from 'axios';

export const useStockStore = defineStore('stock', () => {
    const stocks = ref([]);
    const recommendations = ref([]);
    const search = ref('');
    const filter = ref('all');

    // Cargar las acciones desde la API
    const fetchStocks = async () => {
        try {
            const response = await axios.get('http://localhost:3000/stocks');
            stocks.value = response.data;
        } catch (error) {
            console.error('Error fetching stocks:', error);
        }
    };

    // Obtener acciÃ³n por ticker
    const getStockByTicker = (ticker) => {
        return stocks.value.find(stock => stock.ticker === ticker) || null;
    };

    // Cargar las recomendaciones desde la API
    const fetchRecommendations = async () => {
        try {
            const response = await axios.get('http://localhost:3000/recommendations');
            recommendations.value = response.data;
        } catch (error) {
            console.error('Error fetching recommendations:', error);
        }
    };

    // Definir escala de cambios en rating
    const ratingChanges = {
        "Sell â†’ Buy": 10, "Sell â†’ Overweight": 8, "Sell â†’ Neutral": 5,
        "Neutral â†’ Buy": 5, "Neutral â†’ Overweight": 4, "Equal Weight â†’ Overweight": 4,
        "Market Perform â†’ Buy": 5, "In-Line â†’ Overweight": 4, "Underweight â†’ Overweight": 9,
        "Underweight â†’ Neutral": 4, "Buy â†’ Neutral": -5, "Overweight â†’ Neutral": -4,
        "Buy â†’ Sell": -10, "Overweight â†’ Sell": -8, "Neutral â†’ Sell": -5,
        "Underweight â†’ Sell": -7, "Overweight â†’ Underweight": -9, "Buy â†’ Overweight": 3,
        "Neutral â†’ Neutral": 0, "Buy â†’ Buy": 3
    };

    // FunciÃ³n para obtener el icono del rating
    const ratingSymbol = (stock) => {
        if (!stock || !stock.rating_from || !stock.rating_to) return "ðŸ”µ";
        const key = `${stock.rating_from} â†’ ${stock.rating_to}`;
        const score = ratingChanges[key] || 0;
        if (score > 0) return "ðŸŸ¢";
        if (score < 0) return "ðŸ”´";
        return "ðŸ”µ";
    };

    // FunciÃ³n para obtener el icono del target price
    const priceSymbol = (stock) => {
        if (!stock || !stock.target_from || !stock.target_to) return "âž–";
        const oldPrice = parseFloat(stock.target_from.replace('$', ''));
        const newPrice = parseFloat(stock.target_to.replace('$', ''));
        if (newPrice > oldPrice) return "ðŸ”¼";
        if (newPrice < oldPrice) return "ðŸ”½";
        return "âž–";
    };

    // FunciÃ³n para definir color del target price
    const priceColor = (stock) => {
        if (!stock || !stock.target_from || !stock.target_to) return '';
        const oldPrice = parseFloat(stock.target_from.replace('$', ''));
        const newPrice = parseFloat(stock.target_to.replace('$', ''));
        return newPrice > oldPrice ? 'text-green-600 font-bold' : newPrice < oldPrice ? 'text-red-600 font-bold' : '';
    };

    // Filtro de acciones
    const filteredStocks = computed(() => {
        return stocks.value.filter(stock => {
            const matchesSearch =
                stock.ticker.toLowerCase().includes(search.value.toLowerCase()) ||
                stock.company.toLowerCase().includes(search.value.toLowerCase());

            const ratingChange = ratingSymbol(stock);
            const priceChange = priceSymbol(stock);

            const matchesFilter =
                filter.value === 'all' ||
                (filter.value === 'positive' && (ratingChange === 'ðŸŸ¢' || priceChange === 'ðŸ”¼')) ||
                (filter.value === 'negative' && (ratingChange === 'ðŸ”´' || priceChange === 'ðŸ”½')) ||
                (filter.value === 'neutral' && ratingChange === 'ðŸ”µ' && priceChange === 'âž–');

            return matchesSearch && matchesFilter;
        });
    });

    return {
        stocks,
        recommendations, 
        search,
        filter,
        fetchStocks,
        fetchRecommendations,
        ratingSymbol,
        priceSymbol,
        priceColor,
        filteredStocks,
        getStockByTicker
    };
});
